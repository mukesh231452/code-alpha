<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple E-commerce Store</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb;
        }
        .hidden {
            display: none;
        }
        .product-card {
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
    </style>
</head>
<body class="bg-gray-50">

    <div id="app" class="max-w-7xl mx-auto">

        <!-- Header -->
        <header class="bg-white shadow-md p-4 flex justify-between items-center sticky top-0 z-20">
            <h1 id="home-btn" class="text-3xl font-bold text-indigo-600 cursor-pointer">ShopStop</h1>
            <div>
                <nav id="nav-links" class="hidden items-center">
                    <button id="cart-btn" class="text-gray-600 hover:text-indigo-600 mr-6 relative">
                        <i class="fas fa-shopping-cart text-xl"></i>
                        <span id="cart-count" class="absolute -top-2 -right-3 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">0</span>
                    </button>
                    <button id="profile-btn" class="text-gray-600 hover:text-indigo-600 mr-6">Profile</button>
                    <button id="logout-btn" class="text-red-500 hover:text-red-700">Logout</button>
                </nav>
                 <button id="show-login-btn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700">Login</button>
            </div>
        </header>

        <main id="main-content" class="p-4 sm:p-8">

            <!-- Login/Register View -->
            <section id="auth-view" class="hidden">
                <div class="bg-white p-8 rounded-lg shadow-md max-w-sm mx-auto">
                    <div id="login-form">
                        <h3 class="text-xl font-semibold mb-4 text-center">Login</h3>
                        <input type="text" id="login-username" placeholder="Username" class="w-full p-2 mb-4 border rounded-lg">
                        <input type="password" id="login-password" placeholder="Password" class="w-full p-2 mb-4 border rounded-lg">
                        <button id="login-btn" class="w-full bg-indigo-600 text-white p-2 rounded-lg hover:bg-indigo-700">Login</button>
                        <p class="text-center mt-4">No account? <button id="show-register-form" class="text-indigo-600">Register</button></p>
                    </div>
                    <div id="register-form" class="hidden">
                         <h3 class="text-xl font-semibold mb-4 text-center">Register</h3>
                        <input type="text" id="register-username" placeholder="Username" class="w-full p-2 mb-4 border rounded-lg">
                        <input type="password" id="register-password" placeholder="Password" class="w-full p-2 mb-4 border rounded-lg">
                        <button id="register-btn" class="w-full bg-green-600 text-white p-2 rounded-lg hover:bg-green-700">Register</button>
                        <p class="text-center mt-4">Have an account? <button id="show-login-form" class="text-indigo-600">Login</button></p>
                    </div>
                </div>
            </section>

            <!-- Product List View -->
            <section id="product-list-view">
                <h2 class="text-3xl font-bold mb-6">Our Products</h2>
                <div id="product-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    <!-- Products will be dynamically inserted here -->
                </div>
            </section>
            
            <!-- Product Detail View -->
            <section id="product-detail-view" class="hidden">
                <!-- Product detail content will be loaded here -->
            </section>

            <!-- Order/Checkout View -->
            <section id="order-view" class="hidden">
                 <div class="bg-white p-8 rounded-lg shadow-md max-w-2xl mx-auto">
                    <h2 class="text-2xl font-bold mb-6 border-b pb-4">Checkout</h2>
                    <div id="order-summary"></div>
                    <h3 class="text-xl font-semibold mt-6 mb-4">Shipping Information</h3>
                    <form>
                        <input type="text" placeholder="Full Name" class="w-full p-2 mb-4 border rounded-lg">
                        <input type="text" placeholder="Address" class="w-full p-2 mb-4 border rounded-lg">
                        <input type="text" placeholder="City" class="w-full p-2 mb-4 border rounded-lg">
                        <input type="text" placeholder="Postal Code" class="w-full p-2 mb-4 border rounded-lg">
                        <h3 class="text-xl font-semibold mt-6 mb-4">Payment Information</h3>
                        <input type="text" placeholder="Card Number" class="w-full p-2 mb-4 border rounded-lg">
                        <div class="flex space-x-4">
                            <input type="text" placeholder="MM/YY" class="w-1/2 p-2 mb-4 border rounded-lg">
                            <input type="text" placeholder="CVC" class="w-1/2 p-2 mb-4 border rounded-lg">
                        </div>
                        <button id="confirm-order-btn" type="button" class="w-full mt-4 bg-green-600 text-white p-3 rounded-lg text-lg font-bold hover:bg-green-700">Confirm Order</button>
                    </form>
                </div>
            </section>

        </main>

        <!-- Shopping Cart Modal -->
        <div id="cart-modal" class="hidden fixed inset-0 bg-black bg-opacity-60 flex justify-end z-30">
            <div class="bg-white w-full sm:w-96 h-full shadow-xl p-6 flex flex-col">
                <div class="flex justify-between items-center border-b pb-4">
                    <h2 class="text-2xl font-bold">Your Cart</h2>
                    <button id="close-cart-btn" class="text-2xl">&times;</button>
                </div>
                <div id="cart-items" class="flex-grow overflow-y-auto my-4">
                    <!-- Cart items will be inserted here -->
                    <p class="text-gray-500 text-center">Your cart is empty.</p>
                </div>
                <div class="border-t pt-4">
                    <div class="flex justify-between font-bold text-lg mb-4">
                        <span>Total</span>
                        <span id="cart-total">$0.00</span>
                    </div>
                    <button id="checkout-btn" class="w-full bg-indigo-600 text-white p-3 rounded-lg font-bold hover:bg-indigo-700 disabled:bg-gray-400">Go to Checkout</button>
                </div>
            </div>
        </div>

    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        // Sample data
        const products = [
            { id: 1, name: 'Wireless Headphones', price: 99.99, image: 'https://placehold.co/600x400/3B82F6/FFFFFF?text=Headphones' , description: 'High-fidelity sound with noise cancellation. 24-hour battery life.'},
            { id: 2, name: 'Smart Watch', price: 199.50, image: 'https://placehold.co/600x400/10B981/FFFFFF?text=Watch', description: 'Track your fitness, get notifications, and stay connected on the go.' },
            { id: 3, name: 'Ergonomic Keyboard', price: 75.00, image: 'https://placehold.co/600x400/F59E0B/FFFFFF?text=Keyboard', description: 'Type comfortably for hours with this split-design ergonomic keyboard.' },
            { id: 4, name: '4K Webcam', price: 120.00, image: 'https://placehold.co/600x400/EF4444/FFFFFF?text=Webcam', description: 'Crystal clear 4K video for your meetings and streams.' },
            { id: 5, name: 'Portable SSD', price: 89.99, image: 'https://placehold.co/600x400/6366F1/FFFFFF?text=SSD', description: '1TB of lightning-fast storage in a pocket-sized drive.'},
            { id: 6, name: 'Gaming Mouse', price: 55.25, image: 'https://placehold.co/600x400/8B5CF6/FFFFFF?text=Mouse', description: 'High-precision sensor and customizable buttons for the competitive edge.'},
            { id: 7, name: 'USB-C Hub', price: 45.00, image: 'https://placehold.co/600x400/D97706/FFFFFF?text=Hub', description: 'Expand your connectivity with HDMI, USB-A, and SD card slots.'},
            { id: 8, name: 'Mechanical Pencils', price: 12.99, image: 'https://placehold.co/600x400/059669/FFFFFF?text=Pencils', description: 'A set of 3 professional-grade mechanical pencils for artists and designers.'},
        ];

        // --- DOM ELEMENTS ---
        const authView = document.getElementById('auth-view');
        const productListView = document.getElementById('product-list-view');
        const productDetailView = document.getElementById('product-detail-view');
        const orderView = document.getElementById('order-view');

        const navLinks = document.getElementById('nav-links');
        const showLoginBtn = document.getElementById('show-login-btn');
        const homeBtn = document.getElementById('home-btn');

        const loginForm = document.getElementById('login-form');
        const registerForm = document.getElementById('register-form');
        const showRegisterFormBtn = document.getElementById('show-register-form');
        const showLoginFormBtn = document.getElementById('show-login-form');

        const cartModal = document.getElementById('cart-modal');
        const cartBtn = document.getElementById('cart-btn');
        const closeCartBtn = document.getElementById('close-cart-btn');
        const checkoutBtn = document.getElementById('checkout-btn');
        const confirmOrderBtn = document.getElementById('confirm-order-btn');

        // --- APP STATE ---
        let currentUser = null;
        let cart = []; // Array of { productId, quantity }

        // --- UI UPDATE FUNCTIONS ---
        
        function updateUIForAuthState() {
            if (currentUser) {
                authView.classList.add('hidden');
                showLoginBtn.classList.add('hidden');
                navLinks.classList.remove('hidden');
                navLinks.classList.add('flex');
            } else {
                showLoginBtn.classList.remove('hidden');
                navLinks.classList.add('hidden');
                navLinks.classList.remove('flex');
                showView('products');
            }
            // Always render products on auth state change
            renderProducts();
        }




        function showView(viewName) {
            productListView.classList.add('hidden');
            productDetailView.classList.add('hidden');
            orderView.classList.add('hidden');
            authView.classList.add('hidden');

            if (viewName === 'products') {
                productListView.classList.remove('hidden');
            } else if (viewName === 'details') {
                productDetailView.classList.remove('hidden');
            } else if (viewName === 'order') {
                orderView.classList.remove('hidden');
            } else if (viewName === 'auth') {
                authView.classList.remove('hidden');
            }
        }























        
        
        function renderProducts() {
            const grid = document.getElementById('product-grid');
            grid.innerHTML = '';
            products.forEach(product => {
                const card = document.createElement('div');
                card.className = 'product-card bg-white rounded-lg shadow-md overflow-hidden cursor-pointer';
                card.dataset.productId = product.id;
                card.innerHTML = `
                    <img src="${product.image}" alt="${product.name}" class="w-full h-48 object-cover">
                    <div class="p-4">
                        <h3 class="font-bold text-lg">${product.name}</h3>
                        <p class="text-gray-700 font-semibold mt-2">$${product.price.toFixed(2)}</p>
                        <button data-product-id="${product.id}" class="add-to-cart-btn mt-4 w-full bg-indigo-600 text-white py-2 rounded-lg hover:bg-indigo-700">Add to Cart</button>
                    </div>
                `;
                grid.appendChild(card);
            });
        }
        
        function renderProductDetail(productId) {
            const product = products.find(p => p.id === productId);
            if (!product) return;
            
            productDetailView.innerHTML = `
                <div class="bg-white p-8 rounded-lg shadow-lg">
                    <button id="back-to-products" class="mb-6 text-indigo-600 hover:underline">&larr; Back to all products</button>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                        <div>
                            <img src="${product.image.replace('600x400', '800x600')}" alt="${product.name}" class="w-full rounded-lg">
                        </div>
                        <div>
                            <h2 class="text-3xl font-bold">${product.name}</h2>
                            <p class="text-2xl font-semibold text-gray-800 my-4">$${product.price.toFixed(2)}</p>
                            <p class="text-gray-600 mb-6">${product.description}</p>
                            <button data-product-id="${product.id}" class="add-to-cart-btn w-full bg-indigo-600 text-white py-3 rounded-lg text-lg hover:bg-indigo-700">Add to Cart</button>
                        </div>
                    </div>
                </div>
            `;
            showView('details');
        }
        
        function renderCart() {
            const cartItemsContainer = document.getElementById('cart-items');
            const cartTotalEl = document.getElementById('cart-total');
            const cartCountEl = document.getElementById('cart-count');
            
            if (cart.length === 0) {
                cartItemsContainer.innerHTML = '<p class="text-gray-500 text-center mt-8">Your cart is empty.</p>';
                checkoutBtn.disabled = true;
            } else {
                cartItemsContainer.innerHTML = '';
                cart.forEach(item => {
                    const product = products.find(p => p.id === item.productId);
                    const itemEl = document.createElement('div');
                    itemEl.className = 'flex justify-between items-center mb-4';
                    itemEl.innerHTML = `
                        <div class="flex items-center">
                            <img src="${product.image}" alt="${product.name}" class="w-16 h-16 object-cover rounded-md mr-4">
                            <div>
                                <h4 class="font-semibold">${product.name}</h4>
                                <p class="text-sm text-gray-600">$${product.price.toFixed(2)} x ${item.quantity}</p>
                            </div>
                        </div>
                        <div class="font-semibold">$${(product.price * item.quantity).toFixed(2)}</div>
                    `;
                    cartItemsContainer.appendChild(itemEl);
                });
                checkoutBtn.disabled = false;
            }
            
            const total = cart.reduce((sum, item) => {
                const product = products.find(p => p.id === item.productId);
                return sum + product.price * item.quantity;
            }, 0);

            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            
            cartTotalEl.textContent = `$${total.toFixed(2)}`;
            cartCountEl.textContent = totalItems;
            cartCountEl.classList.toggle('hidden', totalItems === 0);
        }

        function renderOrderSummary() {
            const summaryContainer = document.getElementById('order-summary');
            const total = cart.reduce((sum, item) => {
                const product = products.find(p => p.id === item.productId);
                return sum + product.price * item.quantity;
            }, 0);

            summaryContainer.innerHTML = `
                <h3 class="text-xl font-semibold mb-4">Order Summary</h3>
                ${cart.map(item => {
                    const product = products.find(p => p.id === item.productId);
                    return `<div class="flex justify-between text-gray-700 mb-2">
                                <span>${product.name} (x${item.quantity})</span>
                                <span>$${(product.price * item.quantity).toFixed(2)}</span>
                            </div>`;
                }).join('')}
                <div class="flex justify-between font-bold text-lg mt-4 border-t pt-2">
                    <span>Total</span>
                    <span>$${total.toFixed(2)}</span>
                </div>
            `;
        }


        // --- EVENT HANDLERS ---
        
        function handleAddToCart(productId) {
             if (!currentUser) {
                alert("Please log in to add items to your cart.");
                showView('auth');
                return;
            }
            const existingItem = cart.find(item => item.productId === productId);
            if (existingItem) {
                existingItem.quantity++;
            } else {
                cart.push({ productId: productId, quantity: 1 });
            }
            renderCart();
            // Show a quick confirmation
            cartBtn.classList.add('animate-bounce');
            setTimeout(() => cartBtn.classList.remove('animate-bounce'), 500);
        }

        // --- EVENT LISTENERS ---

        document.body.addEventListener('click', (e) => {
            // Add to cart buttons
            if (e.target.classList.contains('add-to-cart-btn')) {
                const productId = parseInt(e.target.dataset.productId);
                handleAddToCart(productId);
            }
            // View product details
            else if (e.target.closest('.product-card')) {
                 const productId = parseInt(e.target.closest('.product-card').dataset.productId);
                 renderProductDetail(productId);
            }
            // Back to products from detail view
            else if (e.target.id === 'back-to-products') {
                showView('products');
            }
        });

        // Auth form switching
        showRegisterFormBtn.addEventListener('click', () => {
            loginForm.classList.add('hidden');
            registerForm.classList.remove('hidden');
        });
        showLoginFormBtn.addEventListener('click', () => {
            registerForm.classList.add('hidden');
            loginForm.classList.remove('hidden');
        });

        // Auth actions
        showLoginBtn.addEventListener('click', () => showView('auth'));

        document.getElementById('login-btn').addEventListener('click', () => {
            currentUser = { name: document.getElementById('login-username').value || 'User' };
            updateUIForAuthState();
        });
        document.getElementById('logout-btn').addEventListener('click', () => {
            currentUser = null;
            cart = [];
            renderCart();
            updateUIForAuthState();
        });


        // Cart Modal
        cartBtn.addEventListener('click', () => cartModal.classList.remove('hidden'));
        closeCartBtn.addEventListener('click', () => cartModal.classList.add('hidden'));

        // Navigation
        homeBtn.addEventListener('click', () => showView('products'));

        // Checkout Process
        checkoutBtn.addEventListener('click', () => {
            cartModal.classList.add('hidden');
            renderOrderSummary();
            showView('order');
        });

        confirmOrderBtn.addEventListener('click', () => {
            if (cart.length === 0) {
                alert("Your cart is empty!");
                return;
            }
            alert("Thank you for your order! It has been placed successfully.");
            cart = [];
            renderCart();
            showView('products');
        });

        // --- INITIALIZATION ---
        updateUIForAuthState();
    });
    </script>
</body>
</html>
